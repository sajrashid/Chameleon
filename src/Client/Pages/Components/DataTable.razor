@typeparam T

<table class="table table-striped text-center table-responsive-sm">
    <thead class="thead-dark text-center">
        <tr>
            @foreach (var prop in properties)
            {
            <th scope="col" class="text-center">@prop.Name</th>
            }
        </tr>
    </thead>
    <tbody>
        @if (ListModel is not null)
        {
        @foreach (var comp in ListModel)
        {
        <tr class="text-center">
            @foreach (var prop in properties)
            {
            <td class="text-center"
                @ondblclick="() =>
                {
                int.TryParse(prop.GetValue(comp, null).ToString(), out newInt);
                DateTime.TryParse(prop.GetValue(comp, null).ToString(), out newDateTime);
                bool.TryParse(prop.GetValue(comp, null).ToString(), out newBool);
                newString = prop.GetValue(comp, null).ToString();
                focusedRowProperties = new();
                focusedProperty = string.Empty;
                properties.ForEach((prop) => focusedRowProperties.Add(prop.GetValue(comp, null).ToString()));
                focusedProperty = prop.Name;
                }"
                @onfocusout="async () => await OnFocusOutAsync(prop, comp, currentType)">
                @if (isFocusedRowColumn(comp, prop.Name))
                {
                switch (prop.PropertyType.Name)
                {
                case "Int32":
                case "Int64":
                currentType = AcceptedTypes.Int32;
                <input type="number" class="@InputTdTrTbody" @bind="newInt" />
                break;
                case "DateTime":
                currentType = AcceptedTypes.DateTime;
                <input type="datetime-local" class="@InputTdTrTbody" @bind="newDateTime" />
                break;
                case "Boolean":
                currentType = AcceptedTypes.Boolean;
                <input type="checkbox" class="@InputTdTrTbody" @bind="newBool" />
                break;
                default:
                currentType = AcceptedTypes.String;
                <input type="text" class="@InputTdTrTbody" @bind="newString" />
                break;
                }
                }
                else
                {
                <p class="@PTdTrTbodyCSS">@prop.GetValue(comp, null).ToString()</p>
                }
            </td>
            }
        </tr>
        }
        }
        else
        {
        <tr class="@TrTableCss">Loading...</tr>
        }
    </tbody>
</table>